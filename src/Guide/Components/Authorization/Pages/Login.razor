@page "/account/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Guide.Common.Account
@using Guide.Domain.Entities

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager
@inject IStringLocalizer<SharedResource> Loc

<PageTitle>@Loc["Logowanie"]</PageTitle>

<div class="row justify-content-center">
    <div style="max-width: 400px;">
        <StatusMessage Message="@errorMessage"/>
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator/>
            <h1 class="fs-2">@Loc["Logowanie"]</h1>
            <hr/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="nazwa@example.com"/>
                <label for="email" class="form-label">@Loc["Email"]</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" placeholder="hasło"/>
                <label for="password" class="form-label">@Loc["Hasło"]</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="checkbox mb-3">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input"/>
                    @Loc["Pamiętaj mnie"]
                </label>
            </div>
            <div class="mb-3">
                <button type="submit" class="w-100 btn btn-lg btn-primary">@Loc["Zaloguj się"]</button>
            </div>
            <div class="mb-2">
                <a href="account/forgot-password">@Loc["Przypomnij hasło"]</a>
            </div>
            <div>
                <a href="account/register">@Loc["Rejestracja"]</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        var result = await SignInManager.PasswordSignInAsync(user?.UserName ?? "", Input.Password, Input.RememberMe, lockoutOnFailure: false);
        
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/");
        }
        else
        {
            errorMessage = @Loc["Błąd: Nieudana próba logowania."];
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Pamiętaj mnie")] public bool RememberMe { get; set; }
    }

}