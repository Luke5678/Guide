@page "/account/manage/email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Guide.Common.Account
@using Guide.Domain.Entities

@inject UserManager<User> UserManager
@inject IEmailSender<User> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject IStringLocalizer<SharedResource> Loc

<PageTitle>@Loc["Zarządzanie adresem email"]</PageTitle>

<h3>@Loc["Zarządzanie adresem email"]</h3>

<StatusMessage Message="@_message"/>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3 input-group">
                <input type="text" value="@_email" class="form-control" placeholder="Please enter your email." disabled/>
                <div class="input-group-append">
                    <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                </div>
                <label for="email" class="form-label">@Loc["Email"]</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Please enter new email."/>
                <label for="new-email" class="form-label">@Loc["Nowy email"]</label>
                <ValidationMessage For="() => Input.NewEmail" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@Loc["Zmień email"]</button>
        </EditForm>
    </div>
</div>

@code {
    private string? _message;
    private User _user = default!;
    private string? _email;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _email = await UserManager.GetEmailAsync(_user);

        Input.NewEmail ??= _email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == _email)
        {
            _message = Loc["Twój adres email się nie zmienił."];
            return;
        }

        var userId = await UserManager.GetUserIdAsync(_user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(_user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("account/confirm-email-change").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(_user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        _message = Loc["Na twoją skrzynkę został wysłany link potwierdzający zmianę adresu email."];
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }

}