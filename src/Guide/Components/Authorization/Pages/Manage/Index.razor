@page "/account/manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Guide.Common.Account
@using Guide.Domain.Entities

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IStringLocalizer<SharedResource> Loc

<PageTitle>@Loc["Profil"]</PageTitle>

<h3>@Loc["Profil"]</h3>
<StatusMessage/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Username" class="form-control" placeholder="Please choose your username."/>
                <label for="username" class="form-label">@Loc["Nazwa użytkownika"]</label>
                <ValidationMessage For="() => Input.Username" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@Loc["Zapisz"]</button>
        </EditForm>
    </div>
</div>

@code {
    private User _user = default!;
    private string? _username;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _username = await UserManager.GetUserNameAsync(_user);

        Input.Username ??= _username;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.Username != _username)
        {
            var setUsernameResult = await UserManager.SetUserNameAsync(_user, Input.Username);
            if (!setUsernameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus(@Loc["Wystąpił błąd. Nazwa użytkownika nie została zmieniona."], HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus(@Loc["Twój profil został zaktualizowany"], HttpContext);
    }

    private sealed class InputModel
    {
        [Display(Name = "Username")] public string? Username { get; set; }
    }

}