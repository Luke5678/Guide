@page "/admin/attractions/update/{id:int}"
@rendermode InteractiveServer

@using Guide.Application.Features.AttractionImages.Commands.AddAttractionImages
@using Guide.Application.Features.AttractionImages.Commands.DeleteAttractionImage
@using Guide.Application.Features.AttractionImages.Commands.SetMainAttractionImage
@using Guide.Application.Features.Attractions.Commands.UpdateAttraction
@using Guide.Application.Features.Attractions.Queries.GetAttraction
@using Guide.Application.Features.Categories.Queries.GetCategories
@using TinyMCE.Blazor

@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Atrakcje - Panel Administratora</PageTitle>

<SectionContent SectionName="js">
    <script src="js/tinyMceConf.js"></script>
    <script src="_content/TinyMCE.Blazor/tinymce-blazor.js"></script>
</SectionContent>

@if (_request != null)
{
    <div class="row mb-3">
        <div class="col"></div>
        <div class="col-12 col-md-3 col-lg-2">
            <LanguageSwitcher/>
        </div>
    </div>
    <EditForm class="mb-5" Model="_request" OnValidSubmit="HandleSubmit">
        <FluentValidationValidator/>
        <div class="mb-3">
            <label class="form-label">Nazwa</label>
            <InputText class="form-control" @bind-Value="_request.Name">@_request.Name</InputText>
            <ValidationMessage For="() => _request.Name"/>
        </div>
        <div class="mb-3">
            <label class="form-label">Kategorie</label>
            <select class="form-select" multiple @onchange="OnSelectedCategoriesChanged">
                @foreach (var cat in _categories)
                {
                    <option value="@cat.Id" selected=@_request.Categories.Contains(cat.Id)>@cat.Name</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label class="form-label">Opis</label>
            @if (_isTinyMceAvailable)
            {
                <Editor Field="() => _request.Description"
                        @bind-Value="_request.Description"
                        ScriptSrc="/js/tinymce/tinymce.min.js"
                        JsConfSrc="tinyMceConf"/>
            }
        </div>
        <button type="submit" class="btn btn-primary">Zapisz</button>
    </EditForm>

    <div class="row">
        <div class="col mb-3">
            <label class="form-label">Zdjęcia</label>
            <InputFile class="form-control" OnChange="OnInputFileChange" multiple/>
        </div>
    </div>

    <div class="row row-gap-3">
        @if (_isProcessingFiles)
        {
            <p>Przesyłanie zdjęć...</p>
        }
        else
        {
            @foreach (var image in _images)
            {
                <div class="col-sm-6 col-lg-4">
                    <div class="card">
                        <div class="row g-0">
                            <div class="col-md-6">
                                <img src="@image.Url" class="img-fluid rounded-start" alt="...">
                            </div>
                            <div class="col-md-6">
                                <div class="card-body">
                                    <div class="form-check mb-3">
                                        <InputCheckbox class="form-check-input" type="checkbox" id="@($"image-{image.Id}")" name="@($"image-{image.Id}")"
                                                       @bind-Value="image.IsMain" @bind-Value:after="@(async () => await OnMainImageChange(image))"/>
                                        <label class="form-check-label" for="image-@image.Id">
                                            Zdjęcie główne
                                        </label>
                                    </div>
                                    <button type="button" class="btn btn-danger" @onclick="@(async () => await DeleteImage(image))">
                                        Usuń
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}

@code {
    [Parameter] public int? Id { get; set; }

    private const int MaxAllowedFiles = 50;
    private readonly string _language = CultureInfo.CurrentCulture.TwoLetterISOLanguageName;

    private UpdateAttractionCommand? _request;
    private List<CategoryDto> _categories = [];
    private List<AttractionImageDto> _images = [];
    private bool _isProcessingFiles;
    private bool _isTinyMceAvailable;

    protected override async Task OnInitializedAsync()
    {
        if (!Id.HasValue)
        {
            NavigationManager.NavigateTo("/admin/attractions");
            return;
        }

        var attraction = await Mediator.Send(new GetAttractionQuery { Id = Id.Value, LanguageCode = _language });
        if (attraction == null)
        {
            NavigationManager.NavigateTo("/admin/attractions");
            return;
        }

        _categories = await Mediator.Send(new GetCategoriesQuery { LanguageCode = _language });
        _images = attraction.Images.ToList();

        _request = new UpdateAttractionCommand
        {
            Id = attraction.Id,
            Name = attraction.Name, Description = attraction.Description,
            Categories = attraction.Categories.Select(x => x.Id),
            LanguageCode = _language
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _isTinyMceAvailable = await JS.InvokeAsync<bool>("isTinyMceAvailable");
            }
            catch (JSException)
            {
            }
            catch (InvalidOperationException)
            {
            }

            if (!_isTinyMceAvailable)
            {
                NavigationManager.Refresh(true);
            }
        }
    }

    private async Task HandleSubmit()
    {
        await Mediator.Send(_request!);
        NavigationManager.NavigateTo("/admin/attractions");
    }

    private void OnSelectedCategoriesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            _request!.Categories = ((string[])e.Value).Select(int.Parse).ToList();
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        _isProcessingFiles = true;

        var images = await Mediator.Send(new AddAttractionImagesCommand
        {
            Files = e.GetMultipleFiles(MaxAllowedFiles),
            AttractionId = _request!.Id
        });

        _images = images;
        _isProcessingFiles = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteImage(AttractionImageDto image)
    {
        await Mediator.Send(new DeleteAttractionImageCommand { Id = image.Id });
        _images.Remove(image);

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnMainImageChange(AttractionImageDto targetImage)
    {
        await Mediator.Send(new SetMainAttractionImageCommand
        {
            ImageId = targetImage.Id, Attractionid = _request!.Id
        });

        foreach (var image in _images)
        {
            image.IsMain = image.Id == targetImage.Id;
        }

        await InvokeAsync(StateHasChanged);
    }

}