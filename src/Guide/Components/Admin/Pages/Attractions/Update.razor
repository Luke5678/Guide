@using Guide.Application.Features.Attractions.Commands.UpdateAttraction

@page "/admin/attractions/update/{id:int}"
@rendermode InteractiveServer

@inject IAttractionService AttractionService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Atrakcje - Panel Administratora</PageTitle>

@if (_request != null)
{
    <div class="row mb-3">
        <div class="col"></div>
        <div class="col-12 col-md-3 col-lg-2">
            <LanguageSwitcher/>
        </div>
    </div>
    <EditForm Model="_request" OnValidSubmit="HandleSubmit">
        <FluentValidationValidator/>
        <div class="mb-3">
            <label class="form-label">Nazwa</label>
            <InputText class="form-control" @bind-Value="_request.Name">@_request.Name</InputText>
            <ValidationMessage For="() => _request.Name"/>
        </div>
        <div class="mb-3">
            <label class="form-label">Kategorie</label>
            <select class="form-select" multiple @onchange="SelectedCategoriesChanged">
                @foreach (var cat in _categories)
                {
                    <option value="@cat.Id" selected=@_request.Categories.Contains(cat.Id)>@cat.Name</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label class="form-label">Opis</label>
            <InputTextArea class="form-control" @bind-Value="_request.Description" rows="4">@_request.Description</InputTextArea>
            <ValidationMessage For="() => _request.Description"/>
        </div>
        <button type="submit" class="btn btn-primary">Zapisz</button>
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }

    UpdateAttractionCommand? _request;
    List<CategoryDto> _categories = [];

    protected override async Task OnInitializedAsync()
    {
        if (!Id.HasValue)
        {
            NavigationManager.NavigateTo("/admin/attractions");
            return;
        }

        var attraction = await AttractionService.Get(Id.Value);
        if (attraction == null)
        {
            NavigationManager.NavigateTo("/admin/attractions");
            return;
        }

        _categories = await CategoryService.GetAll();

        _request = new UpdateAttractionCommand
        {
            Id = attraction.Id,
            Name = attraction.Name, Description = attraction.Description,
            Categories = attraction.Categories.Select(x => x.Id)
        };
    }

    async Task HandleSubmit()
    {
        await AttractionService.Update(_request!);
        NavigationManager.NavigateTo("/admin/attractions");
    }

    void SelectedCategoriesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            _request!.Categories = ((string[])e.Value).Select(int.Parse).ToList();
        }
    }

}