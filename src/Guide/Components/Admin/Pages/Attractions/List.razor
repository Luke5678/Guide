@using System.Text.RegularExpressions
@using Guide.Components.Admin.Shared
@using Guide.Domain.Entities

@page "/admin"
@page "/admin/attractions"
@rendermode InteractiveServer

@inject IAttractionService AttractionService
@inject NavigationManager NavigationManager

<PageTitle>Atrakcje - Panel Administratora</PageTitle>

<div class="flex mb-8">
    <a class="btn bg-blue-700 hover:bg-blue-900" href="admin/attractions/create">
        Nowa atrakcja
    </a>
</div>

@if (Attractions == null)
{
    <div>...</div>
}
else
{
    <ComTable>
        <HeadContent>
            <ComTh sortable OnClickCallback="@(async () => await ChangeOrder("id"))">
                Id
            </ComTh>
            <ComTh sortable OnClickCallback="@(async () => await ChangeOrder("category"))">
                Kategoria
            </ComTh>
            <ComTh sortable OnClickCallback="@(async () => await ChangeOrder("name"))">
                Nazwa
            </ComTh>
            <ComTh/>
        </HeadContent>
        <BodyContent>
            @foreach (var attraction in Attractions)
            {
                <tr>
                    <ComTd>@attraction.Id</ComTd>
                    <ComTd>@attraction.Category</ComTd>
                    <ComTd>@attraction.Name</ComTd>
                    <ComTd>
                        <div class="flex items-center gap-x-4">
                            <button class="btn bg-blue-700 hover:bg-blue-900" @onclick="() => Edit(attraction)">
                                Edytuj
                            </button>
                            <button class="btn bg-red-500 hover:bg-red-700" @onclick="() => Delete(attraction)">
                                Usuń
                            </button>
                        </div>
                    </ComTd>
                </tr>
            }
        </BodyContent>
    </ComTable>

    <ComPagination CurrentPage="Page" PagesAmount="PagesAmount" OnPageChanged="async page => await ChangePage(page)"/>
}

@code {
    [Parameter] [SupplyParameterFromQuery] public int Page { get; set; }
    [Parameter] [SupplyParameterFromQuery] public int Limit { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? OrderBy { get; set; }
    List<Attraction>? Attractions { get; set; }
    int PagesAmount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAttractions();
    }

    async Task LoadAttractions()
    {
        if (Limit < 5) Limit = 10;
        else if (Limit > 50) Limit = 50;

        PagesAmount = (int)Math.Ceiling(await AttractionService.GetCount() / (double)Limit);

        if (Page < 1) Page = 1;
        else if (Page > PagesAmount) Page = PagesAmount;

        Attractions = await AttractionService.GetAll(Page, Limit, OrderBy);

        await InvokeAsync(StateHasChanged);
    }

    void Edit(Attraction attraction)
    {
        NavigationManager.NavigateTo($"/admin/attractions/update/{attraction.Id}");
    }

    async Task Delete(Attraction attraction)
    {
        await AttractionService.Delete(attraction.Id);
        await LoadAttractions();
    }

    async Task ChangePage(int? newPage = null)
    {
        Page = newPage ?? Page;
        var uri = $"/admin/attractions?page={Page}&limit={Limit}";

        if (!string.IsNullOrEmpty(OrderBy))
        {
            uri += $"&orderBy={OrderBy}";
        }

        await LoadAttractions();
        NavigationManager.NavigateTo(uri);
    }

    async Task ChangeOrder(string column)
    {
        var rg = new Regex($"^{column} (asc|desc)$", RegexOptions.IgnoreCase);
        
        if (string.IsNullOrEmpty(OrderBy) || !rg.IsMatch(OrderBy))
        {
            OrderBy = $"{column} asc";
        }
        else
        {
            var dir = OrderBy.Split(" ")[1];
            OrderBy = dir.ToLower() == "asc" ? $"{column} desc" : $"{column} asc";
        }

        await ChangePage();
    }

}