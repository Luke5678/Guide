@using TinyMCE.Blazor
@using Guide.Common.Static
@using Guide.Application.Features.Attractions.Commands.CreateAttraction

@page "/admin/attractions/create"
@rendermode InteractiveServer

@inject IAttractionService AttractionService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Atrakcje - Panel Administratora</PageTitle>

<EditForm Model="_request" OnValidSubmit="HandleSubmit" class="mb-5">
    <FluentValidationValidator/>
    <div class="mb-3">
        <label class="form-label">Nazwa</label>
        <InputText class="form-control" @bind-Value="_request.Name">@_request.Name</InputText>
        <ValidationMessage For="() => _request.Name"/>
    </div>
    <div class="mb-3">
        <label class="form-label">Kategorie</label>
        <select class="form-select" multiple @onchange="SelectedCategoriesChanged">
            @foreach (var cat in _categories)
            {
                <option value="@cat.Id" selected=@_request.Categories.Contains(cat.Id)>@cat.Name</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label class="form-label">Opis</label>
        <ValidationMessage For="() => _request.Description"/>
        <Editor Field="() => _request.Description"
                @bind-Value="_request.Description"
                ScriptSrc="/js/tinymce/tinymce.min.js"
                Conf="TinyMceConfig.Config"/>
    </div>
    <button type="submit" class="btn btn-primary">Zapisz</button>
</EditForm>

<div class="row">
    <div class="col mb-3">
        <label class="form-label">Zdjęcia</label>
        <InputFile class="form-control" OnChange="OnInputFileChange" multiple/>
    </div>
</div>

<div class="row row-gap-3">
    @if (_isProcessingFiles)
    {
        <p>Przesyłanie zdjęć...</p>
    }
    else
    {
        @foreach (var image in _request.Images)
        {
            <div class="col-sm-6 col-lg-4">
                <div class="card">
                    <div class="row g-0">
                        <div class="col-md-6">
                            <img src="@image.Url" class="img-fluid rounded-start" alt="...">
                        </div>
                        <div class="col-md-6">
                            <div class="card-body">
                                <div class="form-check mb-3">
                                    <InputCheckbox class="form-check-input" type="checkbox" id="@($"image-{image.Id}")" name="@($"image-{image.Id}")"
                                                   @bind-Value="image.IsMain" @bind-Value:after="@(async () => await OnMainImageChange(image))"/>
                                    <label class="form-check-label" for="image-@image.Id">
                                        Zdjęcie główne
                                    </label>
                                </div>
                                <button type="button" class="btn btn-danger" @onclick="@(async () => await DeleteImage(image))">
                                    Usuń
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private const int MaxAllowedFiles = 50;

    private readonly CreateAttractionCommand _request = new();
    private List<CategoryDto> _categories = [];
    private bool _isProcessingFiles;

    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryService.GetAll();
    }

    private async Task HandleSubmit()
    {
        await AttractionService.Create(_request);
        NavigationManager.NavigateTo("/admin/attractions");
    }

    private void SelectedCategoriesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            _request.Categories = ((string[])e.Value).Select(int.Parse).ToList();
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        _isProcessingFiles = true;

        var files = e.GetMultipleFiles(MaxAllowedFiles);
        var images = await AttractionService.AddImages(files);

        _request.Images.AddRange(images);
        _isProcessingFiles = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteImage(AttractionImage image)
    {
        await AttractionService.DeleteImage(image);
        _request.Images.Remove(image);

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnMainImageChange(AttractionImage targetImage)
    {
        foreach (var image in _request.Images)
        {
            image.IsMain = image.Id == targetImage.Id;
        }

        await InvokeAsync(StateHasChanged);
    }

}